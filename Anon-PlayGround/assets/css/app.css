body {
  overflow: hidden;
  position: fixed;
  background: #242424;
}

/*
This is the parent element on the page.
I've set it as a flex item which means the browser will handle its positioning.
 */
#container {
  display: flex; /* Modern approach to page positioning */
  flex-direction: row; /* Position child elements left to right */
  justify-items: center; /* Center the items on the x axis */
  justify-content: space-between; /* Adds space between the items */

}

/*
This is a much better way to target items.  Whilst using classes is an acceptable approach
this can target items in one go.  This is basically saying target all <section> tags
inside the element with id container
 */
#container > section {
  height: 100vh;
  width: 50vw;
  flex: 0 0 calc(50% - 0.5em); /* This adds a gutter between the items */
}

/*
Because the editor element has child elements I've also converted this to a flex container
but this time the items are ordered top to bottom
 */
#editor {
  width: 45%;
  max-height: 1080px !important; /* Owen the use of the !important declaration should be used very sparingly if at all */
  background: #242424;

  display: flex;
  flex-direction: column;
}

/*
None of the inputs on the page had a direction to the user on what they should be used for
this styles all the label elements on the page
 */
section > label {
  font-family: sans-serif;
  font-size: 1.3rem;
  color: aliceblue;
  padding-bottom: 1em;
}

/*
No need to class an element unless you intend to target it with js
 */
#editor > textarea {
  height: 20vh;
  min-width: 35vw;
  max-width: 800px;
  min-height: 20vh;
  border-radius: 3px;
  background: #7a7a7a;
  border: none;
}
/*
#editor .editor_input {
  height: 32vh;
  min-width: 35vw;
  max-width: 800px;
  min-height: 20vh;
  border-radius: 3px;
  background: #7a7a7a;
  border: none;
}
 */

#canvas {
  background: white;
  border-radius: 3px;
  height: 97vh;
  overflow-y: scroll;
}
/*# sourceMappingURL=app.css.map */